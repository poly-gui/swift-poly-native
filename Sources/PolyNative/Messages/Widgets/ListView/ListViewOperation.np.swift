// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

let ListViewOperation_typeID: TypeID = 3_516_816_492

class ListViewOperation: NanoPackMessage {
  var typeID: TypeID { return 3_516_816_492 }

  let tag: Int32

  static func from(data: Data) -> ListViewOperation? {
    switch data.readTypeID() {
    case 3_516_816_492: return ListViewOperation(data: data)
    case 2_077_451_345: return ListViewInsertOperation(data: data)
    case 2_223_513_129: return ListViewDeleteOperation(data: data)
    default: return nil
    }
  }

  static func from(data: Data, bytesRead: inout Int) -> ListViewOperation? {
    switch data.readTypeID() {
    case 3_516_816_492: return ListViewOperation(data: data, bytesRead: &bytesRead)
    case 2_077_451_345: return ListViewInsertOperation(data: data, bytesRead: &bytesRead)
    case 2_223_513_129: return ListViewDeleteOperation(data: data, bytesRead: &bytesRead)
    default: return nil
    }
  }

  init(tag: Int32) {
    self.tag = tag
  }

  required init?(data: Data) {
    var ptr = data.startIndex + 8

    let tag: Int32 = data.read(at: ptr)
    ptr += 4

    self.tag = tag
  }

  required init?(data: Data, bytesRead: inout Int) {
    var ptr = data.startIndex + 8

    let tag: Int32 = data.read(at: ptr)
    ptr += 4

    self.tag = tag

    bytesRead = ptr - data.startIndex
  }

  func data() -> Data? {
    let offset = 0

    var data = Data()
    data.reserveCapacity(8)

    data.append(typeID: TypeID(ListViewOperation_typeID))
    data.append([0], count: 1 * 4)

    data.write(size: 4, ofField: 0, offset: offset)
    data.append(int: tag)

    return data
  }

  func dataWithLengthPrefix() -> Data? {
    let offset = 4

    var data = Data()
    data.reserveCapacity(8 + 4)

    data.append(int: Int32(0))
    data.append(typeID: TypeID(ListViewOperation_typeID))
    data.append([0], count: 1 * 4)

    data.write(size: 4, ofField: 0, offset: offset)
    data.append(int: tag)

    data.write(size: data.count, at: 0)

    return data
  }
}
