// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

let ListView_typeID: TypeID = 2_164_488_861

class ListView: Widget {
  override var typeID: TypeID { return 2_164_488_861 }

  let width: Double
  let height: Double
  let sections: [Int32]
  let itemHeight: Double
  let onCreate: Int32
  let onBind: Int32

  init(
    tag: Int32?, width: Double, height: Double, sections: [Int32], itemHeight: Double,
    onCreate: Int32, onBind: Int32
  ) {
    self.width = width
    self.height = height
    self.sections = sections
    self.itemHeight = itemHeight
    self.onCreate = onCreate
    self.onBind = onBind
    super.init(tag: tag)
  }

  required init?(data: Data) {
    var ptr = data.startIndex + 32

    var tag: Int32?
    if data.readSize(ofField: 0) < 0 {
      tag = nil
    } else {
      tag = data.read(at: ptr)
      ptr += 4
    }

    let width: Double = data.read(at: ptr)
    ptr += 8

    let height: Double = data.read(at: ptr)
    ptr += 8

    let sectionsByteSize = data.readSize(ofField: 3)
    let sectionsItemCount = sectionsByteSize / 4
    let sections = data[ptr..<ptr + sectionsByteSize].withUnsafeBytes {
      [Int32]($0.bindMemory(to: Int32.self).lazy.map { $0.littleEndian })
    }
    ptr += sectionsByteSize

    let itemHeight: Double = data.read(at: ptr)
    ptr += 8

    let onCreate: Int32 = data.read(at: ptr)
    ptr += 4

    let onBind: Int32 = data.read(at: ptr)
    ptr += 4

    self.width = width
    self.height = height
    self.sections = sections
    self.itemHeight = itemHeight
    self.onCreate = onCreate
    self.onBind = onBind
    super.init(tag: tag)
  }

  required init?(data: Data, bytesRead: inout Int) {
    var ptr = data.startIndex + 32

    var tag: Int32?
    if data.readSize(ofField: 0) < 0 {
      tag = nil
    } else {
      tag = data.read(at: ptr)
      ptr += 4
    }

    let width: Double = data.read(at: ptr)
    ptr += 8

    let height: Double = data.read(at: ptr)
    ptr += 8

    let sectionsByteSize = data.readSize(ofField: 3)
    let sectionsItemCount = sectionsByteSize / 4
    let sections = data[ptr..<ptr + sectionsByteSize].withUnsafeBytes {
      [Int32]($0.bindMemory(to: Int32.self).lazy.map { $0.littleEndian })
    }
    ptr += sectionsByteSize

    let itemHeight: Double = data.read(at: ptr)
    ptr += 8

    let onCreate: Int32 = data.read(at: ptr)
    ptr += 4

    let onBind: Int32 = data.read(at: ptr)
    ptr += 4

    self.width = width
    self.height = height
    self.sections = sections
    self.itemHeight = itemHeight
    self.onCreate = onCreate
    self.onBind = onBind
    super.init(tag: tag)

    bytesRead = ptr - data.startIndex
  }

  override func data() -> Data? {
    let offset = 0

    var data = Data()
    data.reserveCapacity(32)

    data.append(typeID: TypeID(ListView_typeID))
    data.append([0], count: 7 * 4)

    if let tag = self.tag {
      data.write(size: 4, ofField: 0, offset: offset)
      data.append(int: tag)
    } else {
      data.write(size: -1, ofField: 0, offset: offset)
    }

    data.write(size: 8, ofField: 1, offset: offset)
    data.append(double: width)

    data.write(size: 8, ofField: 2, offset: offset)
    data.append(double: height)

    data.write(size: sections.count * 4, ofField: 3, offset: offset)
    for i in sections {
      data.append(int: i)
    }

    data.write(size: 8, ofField: 4, offset: offset)
    data.append(double: itemHeight)

    data.write(size: 4, ofField: 5, offset: offset)
    data.append(int: onCreate)

    data.write(size: 4, ofField: 6, offset: offset)
    data.append(int: onBind)

    return data
  }

  override func dataWithLengthPrefix() -> Data? {
    let offset = 4

    var data = Data()
    data.reserveCapacity(32 + 4)

    data.append(int: Int32(0))
    data.append(typeID: TypeID(ListView_typeID))
    data.append([0], count: 7 * 4)

    if let tag = self.tag {
      data.write(size: 4, ofField: 0, offset: offset)
      data.append(int: tag)
    } else {
      data.write(size: -1, ofField: 0, offset: offset)
    }

    data.write(size: 8, ofField: 1, offset: offset)
    data.append(double: width)

    data.write(size: 8, ofField: 2, offset: offset)
    data.append(double: height)

    data.write(size: sections.count * 4, ofField: 3, offset: offset)
    for i in sections {
      data.append(int: i)
    }

    data.write(size: 8, ofField: 4, offset: offset)
    data.append(double: itemHeight)

    data.write(size: 4, ofField: 5, offset: offset)
    data.append(int: onCreate)

    data.write(size: 4, ofField: 6, offset: offset)
    data.append(int: onBind)

    data.write(size: data.count, at: 0)

    return data
  }
}
