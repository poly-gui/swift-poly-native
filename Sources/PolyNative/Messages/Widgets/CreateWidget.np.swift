// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

let CreateWidget_typeID: TypeID = 20

class CreateWidget: NanoPackMessage {
  var typeID: TypeID { return 20 }

  let widget: Widget
  let windowTag: String

  init(widget: Widget, windowTag: String) {
    self.widget = widget
    self.windowTag = windowTag
  }

  required init?(data: Data) {
    var ptr = 12

    let widgetSize = data.readSize(ofField: 0)
    guard let widget = Widget.from(data: data[ptr..<ptr + widgetSize]) else {
      return nil
    }

    let windowTagSize = data.readSize(ofField: 1)
    guard let windowTag = data.read(at: ptr, withLength: windowTagSize) else {
      return nil
    }
    ptr += windowTagSize

    self.widget = widget
    self.windowTag = windowTag
  }

  func data() -> Data? {
    var data = Data()
    data.reserveCapacity(12)

    withUnsafeBytes(of: Int32(CreateWidget_typeID)) {
      data.append(contentsOf: $0)
    }

    data.append([0], count: 8)

    guard let widgetData = widget.data() else {
      return nil
    }
    data.append(widgetData)
    data.write(size: widgetData.count, ofField: 0)

    data.write(size: windowTag.lengthOfBytes(using: .utf8), ofField: 1)
    data.append(string: windowTag)

    return data
  }
}
