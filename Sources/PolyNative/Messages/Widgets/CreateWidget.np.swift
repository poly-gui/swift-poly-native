// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

let CreateWidget_typeID: TypeID = 2_313_387_354

class CreateWidget: NanoPackMessage {
  var typeID: TypeID { return 2_313_387_354 }

  var headerSize: Int { return 12 }

  let widget: Widget
  let windowTag: String

  init(widget: Widget, windowTag: String) {
    self.widget = widget
    self.windowTag = windowTag
  }

  required init?(data: Data) {
    var ptr = data.startIndex + 12

    let widgetByteSize = data.readSize(ofField: 0)
    guard let widget = Widget.from(data: data[ptr...]) else {
      return nil
    }
    ptr += widgetByteSize

    let windowTagSize = data.readSize(ofField: 1)
    guard let windowTag = data.read(at: ptr, withLength: windowTagSize) else {
      return nil
    }
    ptr += windowTagSize

    self.widget = widget
    self.windowTag = windowTag
  }

  required init?(data: Data, bytesRead: inout Int) {
    var ptr = data.startIndex + 12

    let widgetByteSize = data.readSize(ofField: 0)
    guard let widget = Widget.from(data: data[ptr...]) else {
      return nil
    }
    ptr += widgetByteSize

    let windowTagSize = data.readSize(ofField: 1)
    guard let windowTag = data.read(at: ptr, withLength: windowTagSize) else {
      return nil
    }
    ptr += windowTagSize

    self.widget = widget
    self.windowTag = windowTag

    bytesRead = ptr - data.startIndex
  }

  func write(to data: inout Data, offset: Int) -> Int {
    let dataCountBefore = data.count

    data.reserveCapacity(offset + 12)

    data.append(typeID: TypeID(CreateWidget_typeID))
    data.append([0], count: 2 * 4)

    let widgetByteSize = widget.write(to: &data, offset: data.count)
    data.write(size: widgetByteSize, ofField: 0, offset: offset)

    data.write(size: windowTag.lengthOfBytes(using: .utf8), ofField: 1, offset: offset)
    data.append(string: windowTag)

    return data.count - dataCountBefore
  }

  func data() -> Data? {
    var data = Data()
    _ = write(to: &data, offset: 0)
    return data
  }
}
