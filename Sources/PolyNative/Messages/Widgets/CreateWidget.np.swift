// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

let CreateWidget_typeID: TypeID = 20

class CreateWidget: NanoPackMessage {
  var typeID: TypeID { return 20 }

  let widget: Widget
  let windowTag: String

  init(widget: Widget, windowTag: String) {
    self.widget = widget
    self.windowTag = windowTag
  }

  required init?(data: Data) {
    var ptr = data.startIndex + 12

    let widgetByteSize = data.readSize(ofField: 0)
    guard let widget = Widget.from(data: data[ptr...]) else {
      return nil
    }
    ptr += widgetByteSize

    let windowTagSize = data.readSize(ofField: 1)
    guard let windowTag = data.read(at: ptr, withLength: windowTagSize) else {
      return nil
    }
    ptr += windowTagSize

    self.widget = widget
    self.windowTag = windowTag
  }

  required init?(data: Data, bytesRead: inout Int) {
    var ptr = data.startIndex + 12

    let widgetByteSize = data.readSize(ofField: 0)
    guard let widget = Widget.from(data: data[ptr...]) else {
      return nil
    }
    ptr += widgetByteSize

    let windowTagSize = data.readSize(ofField: 1)
    guard let windowTag = data.read(at: ptr, withLength: windowTagSize) else {
      return nil
    }
    ptr += windowTagSize

    self.widget = widget
    self.windowTag = windowTag

    bytesRead = ptr - data.startIndex
  }

  func data() -> Data? {
    let offset = 0

    var data = Data()
    data.reserveCapacity(12)

    data.append(int: Int32(CreateWidget_typeID))
    data.append([0], count: 2 * 4)

    guard let widgetData = widget.data() else {
      return nil
    }
    data.write(size: widgetData.count, ofField: 0, offset: offset)
    data.append(widgetData)

    data.write(size: windowTag.lengthOfBytes(using: .utf8), ofField: 1, offset: offset)
    data.append(string: windowTag)

    return data
  }

  func dataWithLengthPrefix() -> Data? {
    let offset = 4

    var data = Data()
    data.reserveCapacity(12 + 4)

    data.append(int: Int32(0))
    data.append(int: Int32(CreateWidget_typeID))
    data.append([0], count: 2 * 4)

    guard let widgetData = widget.data() else {
      return nil
    }
    data.write(size: widgetData.count, ofField: 0, offset: offset)
    data.append(widgetData)

    data.write(size: windowTag.lengthOfBytes(using: .utf8), ofField: 1, offset: offset)
    data.append(string: windowTag)

    data.write(size: data.count, at: 0)

    return data
  }
}
