// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

let Widget_typeID: TypeID = 100

class Widget: NanoPackMessage {
  var typeID: TypeID { return 100 }

  let tag: Int32?

  static func from(data: Data) -> Widget? {
    switch data.readTypeID() {
    case 100: return Widget(data: data)
    case 103: return Column(data: data)
    case 101: return Text(data: data)
    case 102: return Center(data: data)
    default: return nil
    }
  }

  static func from(data: Data, bytesRead: inout Int) -> Widget? {
    switch data.readTypeID() {
    case 100: return Widget(data: data, bytesRead: &bytesRead)
    case 103: return Column(data: data, bytesRead: &bytesRead)
    case 101: return Text(data: data, bytesRead: &bytesRead)
    case 102: return Center(data: data, bytesRead: &bytesRead)
    default: return nil
    }
  }

  init(tag: Int32?) {
    self.tag = tag
  }

  required init?(data: Data) {
    var ptr = data.startIndex + 8

    var tag: Int32?
    if data.readSize(ofField: 0) < 0 {
      tag = nil
    } else {
      tag = data.read(at: ptr)
      ptr += 4
    }

    self.tag = tag
  }

  required init?(data: Data, bytesRead: inout Int) {
    var ptr = data.startIndex + 8

    var tag: Int32?
    if data.readSize(ofField: 0) < 0 {
      tag = nil
    } else {
      tag = data.read(at: ptr)
      ptr += 4
    }

    self.tag = tag

    bytesRead = ptr - data.startIndex
  }

  func data() -> Data? {
    var data = Data()
    data.reserveCapacity(8)

    withUnsafeBytes(of: Int32(Widget_typeID)) {
      data.append(contentsOf: $0)
    }

    data.append([0], count: 1 * 4)

    if let tag = self.tag {
      data.write(size: 4, ofField: 0)
      data.append(int: tag)
    } else {
      data.write(size: -1, ofField: 0)
    }

    return data
  }
}
