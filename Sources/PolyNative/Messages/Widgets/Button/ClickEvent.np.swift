// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

let ClickEvent_typeID: TypeID = 1041

class ClickEvent: NanoPackMessage {
  var typeID: TypeID { return 1041 }

  let timestamp: Int32

  init(timestamp: Int32) {
    self.timestamp = timestamp
  }

  required init?(data: Data) {
    var ptr = data.startIndex + 8

    let timestamp: Int32 = data.read(at: ptr)
    ptr += 4

    self.timestamp = timestamp
  }

  required init?(data: Data, bytesRead: inout Int) {
    var ptr = data.startIndex + 8

    let timestamp: Int32 = data.read(at: ptr)
    ptr += 4

    self.timestamp = timestamp

    bytesRead = ptr - data.startIndex
  }

  func data() -> Data? {
    var data = Data()
    data.reserveCapacity(8)

    withUnsafeBytes(of: Int32(ClickEvent_typeID)) {
      data.append(contentsOf: $0)
    }

    data.append([0], count: 1 * 4)

    data.write(size: 4, ofField: 0)
    data.append(int: timestamp)

    return data
  }
}
