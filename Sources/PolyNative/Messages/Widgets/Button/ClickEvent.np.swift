// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

let ClickEvent_typeID: TypeID = 837_166_865

class ClickEvent: NanoPackMessage {
  var typeID: TypeID { return 837_166_865 }

  let timestamp: Int32

  init(timestamp: Int32) {
    self.timestamp = timestamp
  }

  required init?(data: Data) {
    var ptr = data.startIndex + 8

    let timestamp: Int32 = data.read(at: ptr)
    ptr += 4

    self.timestamp = timestamp
  }

  required init?(data: Data, bytesRead: inout Int) {
    var ptr = data.startIndex + 8

    let timestamp: Int32 = data.read(at: ptr)
    ptr += 4

    self.timestamp = timestamp

    bytesRead = ptr - data.startIndex
  }

  func data() -> Data? {
    let offset = 0

    var data = Data()
    data.reserveCapacity(8)

    data.append(typeID: TypeID(ClickEvent_typeID))
    data.append([0], count: 1 * 4)

    data.write(size: 4, ofField: 0, offset: offset)
    data.append(int: timestamp)

    return data
  }

  func dataWithLengthPrefix() -> Data? {
    let offset = 4

    var data = Data()
    data.reserveCapacity(8 + 4)

    data.append(int: Int32(0))
    data.append(typeID: TypeID(ClickEvent_typeID))
    data.append([0], count: 1 * 4)

    data.write(size: 4, ofField: 0, offset: offset)
    data.append(int: timestamp)

    data.write(size: data.count, at: 0)

    return data
  }
}
