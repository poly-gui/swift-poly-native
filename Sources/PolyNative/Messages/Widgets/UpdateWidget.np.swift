// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

let UpdateWidget_typeID: TypeID = 1_016_534_798

class UpdateWidget: NanoPackMessage {
  var typeID: TypeID { return 1_016_534_798 }

  let tag: Int32
  let widget: Widget
  let args: Data?

  init(tag: Int32, widget: Widget, args: Data?) {
    self.tag = tag
    self.widget = widget
    self.args = args
  }

  required init?(data: Data) {
    var ptr = data.startIndex + 16

    let tag: Int32 = data.read(at: ptr)
    ptr += 4

    let widgetByteSize = data.readSize(ofField: 1)
    guard let widget = Widget.from(data: data[ptr...]) else {
      return nil
    }
    ptr += widgetByteSize

    var args: Data?
    if data.readSize(ofField: 2) < 0 {
      args = nil
    } else {
      let argsByteSize = data.readSize(ofField: 2)
      args = data[ptr..<ptr + argsByteSize]
      ptr += argsByteSize
    }

    self.tag = tag
    self.widget = widget
    self.args = args
  }

  required init?(data: Data, bytesRead: inout Int) {
    var ptr = data.startIndex + 16

    let tag: Int32 = data.read(at: ptr)
    ptr += 4

    let widgetByteSize = data.readSize(ofField: 1)
    guard let widget = Widget.from(data: data[ptr...]) else {
      return nil
    }
    ptr += widgetByteSize

    var args: Data?
    if data.readSize(ofField: 2) < 0 {
      args = nil
    } else {
      let argsByteSize = data.readSize(ofField: 2)
      args = data[ptr..<ptr + argsByteSize]
      ptr += argsByteSize
    }

    self.tag = tag
    self.widget = widget
    self.args = args

    bytesRead = ptr - data.startIndex
  }

  func data() -> Data? {
    let offset = 0

    var data = Data()
    data.reserveCapacity(16)

    data.append(typeID: TypeID(UpdateWidget_typeID))
    data.append([0], count: 3 * 4)

    data.write(size: 4, ofField: 0, offset: offset)
    data.append(int: tag)

    guard let widgetData = widget.data() else {
      return nil
    }
    data.write(size: widgetData.count, ofField: 1, offset: offset)
    data.append(widgetData)

    if let args = self.args {
      data.write(size: args.count, ofField: 2, offset: offset)
      data.append(args)
    } else {
      data.write(size: -1, ofField: 2, offset: offset)
    }

    return data
  }

  func dataWithLengthPrefix() -> Data? {
    let offset = 4

    var data = Data()
    data.reserveCapacity(16 + 4)

    data.append(int: Int32(0))
    data.append(typeID: TypeID(UpdateWidget_typeID))
    data.append([0], count: 3 * 4)

    data.write(size: 4, ofField: 0, offset: offset)
    data.append(int: tag)

    guard let widgetData = widget.data() else {
      return nil
    }
    data.write(size: widgetData.count, ofField: 1, offset: offset)
    data.append(widgetData)

    if let args = self.args {
      data.write(size: args.count, ofField: 2, offset: offset)
      data.append(args)
    } else {
      data.write(size: -1, ofField: 2, offset: offset)
    }

    data.write(size: data.count, at: 0)

    return data
  }
}
