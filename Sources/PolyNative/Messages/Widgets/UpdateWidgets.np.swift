// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

let UpdateWidgets_typeID: TypeID = 624_966_581

class UpdateWidgets: NanoPackMessage {
  var typeID: TypeID { return 624_966_581 }

  let updates: [UpdateWidget]

  init(updates: [UpdateWidget]) {
    self.updates = updates
  }

  required init?(data: Data) {
    var ptr = data.startIndex + 8

    let updatesItemCount = data.readSize(at: ptr)
    ptr += 4
    var updates: [UpdateWidget] = []
    updates.reserveCapacity(updatesItemCount)
    for _ in 0..<updatesItemCount {
      var iItemByteSize = 0
      guard let iItem = UpdateWidget(data: data[ptr...], bytesRead: &iItemByteSize) else {
        return nil
      }
      ptr += iItemByteSize
      updates.append(iItem)
    }

    self.updates = updates
  }

  required init?(data: Data, bytesRead: inout Int) {
    var ptr = data.startIndex + 8

    let updatesItemCount = data.readSize(at: ptr)
    ptr += 4
    var updates: [UpdateWidget] = []
    updates.reserveCapacity(updatesItemCount)
    for _ in 0..<updatesItemCount {
      var iItemByteSize = 0
      guard let iItem = UpdateWidget(data: data[ptr...], bytesRead: &iItemByteSize) else {
        return nil
      }
      ptr += iItemByteSize
      updates.append(iItem)
    }

    self.updates = updates

    bytesRead = ptr - data.startIndex
  }

  func data() -> Data? {
    let offset = 0

    var data = Data()
    data.reserveCapacity(8)

    data.append(typeID: TypeID(UpdateWidgets_typeID))
    data.append([0], count: 1 * 4)

    data.append(size: updates.count)
    var updatesByteSize: Size = 4
    for i in updates {
      guard let iData = i.data() else {
        return nil
      }
      data.append(iData)
      updatesByteSize += iData.count
    }
    data.write(size: updatesByteSize, ofField: 0, offset: offset)

    return data
  }

  func dataWithLengthPrefix() -> Data? {
    let offset = 4

    var data = Data()
    data.reserveCapacity(8 + 4)

    data.append(int: Int32(0))
    data.append(typeID: TypeID(UpdateWidgets_typeID))
    data.append([0], count: 1 * 4)

    data.append(size: updates.count)
    var updatesByteSize: Size = 4
    for i in updates {
      guard let iData = i.data() else {
        return nil
      }
      data.append(iData)
      updatesByteSize += iData.count
    }
    data.write(size: updatesByteSize, ofField: 0, offset: offset)

    data.write(size: data.count, at: 0)

    return data
  }
}
