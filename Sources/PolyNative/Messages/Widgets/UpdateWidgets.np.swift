// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

let UpdateWidgets_typeID: TypeID = 4

class UpdateWidgets: NanoPackMessage {
  var typeID: TypeID { return 4 }

  let updates: [UpdateWidget]

  init(updates: [UpdateWidget]) {
    self.updates = updates
  }

  required init?(data: Data) {
    var ptr = data.startIndex + 8

    let updatesItemCount = data.readSize(at: ptr)
    ptr += 4
    var updates: [UpdateWidget] = []
    updates.reserveCapacity(updatesItemCount)
    for _ in 0..<updatesItemCount {
      var iItemByteSize = 0
      guard let iItem = UpdateWidget(data: data[ptr...], bytesRead: &iItemByteSize) else {
        return nil
      }
      ptr += iItemByteSize
      updates.append(iItem)
    }

    self.updates = updates
  }

  required init?(data: Data, bytesRead: inout Int) {
    var ptr = data.startIndex + 8

    let updatesItemCount = data.readSize(at: ptr)
    ptr += 4
    var updates: [UpdateWidget] = []
    updates.reserveCapacity(updatesItemCount)
    for _ in 0..<updatesItemCount {
      var iItemByteSize = 0
      guard let iItem = UpdateWidget(data: data[ptr...], bytesRead: &iItemByteSize) else {
        return nil
      }
      ptr += iItemByteSize
      updates.append(iItem)
    }

    self.updates = updates

    bytesRead = ptr - data.startIndex
  }

  func data() -> Data? {
    var data = Data()
    data.reserveCapacity(8)

    withUnsafeBytes(of: Int32(UpdateWidgets_typeID)) {
      data.append(contentsOf: $0)
    }

    data.append([0], count: 1 * 4)

    data.append(size: updates.count)
    var updatesByteSize: Size = 4
    for i in updates {
      guard let iData = i.data() else {
        return nil
      }
      data.append(iData)
      updatesByteSize += iData.count
    }
    data.write(size: updatesByteSize, ofField: 0)

    return data
  }
}
