// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

let InvokeCallback_typeID: TypeID = 2_013_877_267

class InvokeCallback: NanoPackMessage {
  var typeID: TypeID { return 2_013_877_267 }

  let handle: Int32
  let args: Data
  let replyTo: Int32?

  init(handle: Int32, args: Data, replyTo: Int32?) {
    self.handle = handle
    self.args = args
    self.replyTo = replyTo
  }

  required init?(data: Data) {
    var ptr = data.startIndex + 16

    let handle: Int32 = data.read(at: ptr)
    ptr += 4

    let argsByteSize = data.readSize(ofField: 1)
    let args = data[ptr..<ptr + argsByteSize]
    ptr += argsByteSize

    var replyTo: Int32?
    if data.readSize(ofField: 2) < 0 {
      replyTo = nil
    } else {
      replyTo = data.read(at: ptr)
      ptr += 4
    }

    self.handle = handle
    self.args = args
    self.replyTo = replyTo
  }

  required init?(data: Data, bytesRead: inout Int) {
    var ptr = data.startIndex + 16

    let handle: Int32 = data.read(at: ptr)
    ptr += 4

    let argsByteSize = data.readSize(ofField: 1)
    let args = data[ptr..<ptr + argsByteSize]
    ptr += argsByteSize

    var replyTo: Int32?
    if data.readSize(ofField: 2) < 0 {
      replyTo = nil
    } else {
      replyTo = data.read(at: ptr)
      ptr += 4
    }

    self.handle = handle
    self.args = args
    self.replyTo = replyTo

    bytesRead = ptr - data.startIndex
  }

  func data() -> Data? {
    let offset = 0

    var data = Data()
    data.reserveCapacity(16)

    data.append(typeID: TypeID(InvokeCallback_typeID))
    data.append([0], count: 3 * 4)

    data.write(size: 4, ofField: 0, offset: offset)
    data.append(int: handle)

    data.write(size: args.count, ofField: 1, offset: offset)
    data.append(args)

    if let replyTo = self.replyTo {
      data.write(size: 4, ofField: 2, offset: offset)
      data.append(int: replyTo)
    } else {
      data.write(size: -1, ofField: 2, offset: offset)
    }

    return data
  }

  func dataWithLengthPrefix() -> Data? {
    let offset = 4

    var data = Data()
    data.reserveCapacity(16 + 4)

    data.append(int: Int32(0))
    data.append(typeID: TypeID(InvokeCallback_typeID))
    data.append([0], count: 3 * 4)

    data.write(size: 4, ofField: 0, offset: offset)
    data.append(int: handle)

    data.write(size: args.count, ofField: 1, offset: offset)
    data.append(args)

    if let replyTo = self.replyTo {
      data.write(size: 4, ofField: 2, offset: offset)
      data.append(int: replyTo)
    } else {
      data.write(size: -1, ofField: 2, offset: offset)
    }

    data.write(size: data.count, at: 0)

    return data
  }
}
