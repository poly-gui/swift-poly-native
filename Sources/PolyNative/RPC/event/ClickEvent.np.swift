// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

let ClickEvent_typeID: TypeID = 837_166_865

class ClickEvent: NanoPackMessage {
  var typeID: TypeID { return 837_166_865 }

  var headerSize: Int { return 8 }

  let timestamp: UInt32

  init(timestamp: UInt32) {
    self.timestamp = timestamp
  }

  required init?(data: Data) {
    var ptr = data.startIndex + 8

    let timestamp: UInt32 = data.read(at: ptr)
    ptr += 4

    self.timestamp = timestamp
  }

  required init?(data: Data, bytesRead: inout Int) {
    var ptr = data.startIndex + 8

    let timestamp: UInt32 = data.read(at: ptr)
    ptr += 4

    self.timestamp = timestamp

    bytesRead = ptr - data.startIndex
  }

  func write(to data: inout Data, offset: Int) -> Int {
    let dataCountBefore = data.count

    data.reserveCapacity(offset + 8)

    data.append(typeID: TypeID(ClickEvent_typeID))
    data.append([0], count: 1 * 4)

    data.write(size: 4, ofField: 0, offset: offset)
    data.append(int: timestamp)

    return data.count - dataCountBefore
  }

  func data() -> Data? {
    var data = Data()
    _ = write(to: &data, offset: 0)
    return data
  }
}
