// AUTOMATICALLY GENERATED BY NANOPACK. DO NOT MODIFY BY HAND.

import Foundation
import NanoPack

let SliderValueChangedEvent_typeID: TypeID = 1_030_062_961

class SliderValueChangedEvent: NanoPackMessage {
  var typeID: TypeID { return 1_030_062_961 }

  var headerSize: Int { return 8 }

  let newValue: Double

  init(newValue: Double) {
    self.newValue = newValue
  }

  required init?(data: Data) {
    var ptr = data.startIndex + 8

    let newValue: Double = data.read(at: ptr)
    ptr += 8

    self.newValue = newValue
  }

  required init?(data: Data, bytesRead: inout Int) {
    var ptr = data.startIndex + 8

    let newValue: Double = data.read(at: ptr)
    ptr += 8

    self.newValue = newValue

    bytesRead = ptr - data.startIndex
  }

  func write(to data: inout Data, offset: Int) -> Int {
    let dataCountBefore = data.count

    data.reserveCapacity(offset + 8)

    data.append(typeID: TypeID(SliderValueChangedEvent_typeID))
    data.append([0], count: 1 * 4)

    data.write(size: 8, ofField: 0, offset: offset)
    data.append(double: newValue)

    return data.count - dataCountBefore
  }

  func data() -> Data? {
    var data = Data()
    _ = write(to: &data, offset: 0)
    return data
  }
}
